{{ 'el-reset.css' | asset_url | stylesheet_tag }}
<style>
  .form-box {
    min-width: 408px;
  }
  .reset-form-tips {
    margin-top: -10px;
  }
</style>
<section id="reset-wrapper" class="el-reset-from">
  <div class="form-container">
    <div class="form-box">
      <h3 class="block-title">Reset Password</h3>
      <div class="block-text">Enter a new password for your account</div>
      <el-form
        autocomplete="off"
        label-width="0"
        :status-icon="false"
        :model="ruleForm"
        :rules="rules"
        ref="ruleForm"
        class="form-wrapper"
      >
        <el-row>
          <el-form-item class="line-input" prop="password">
            <el-input
              autocomplete="new-password"
              id="register_password"
              v-model="ruleForm.password"
              :type="!showPass? 'password': 'text'"
              v-focus-input="ruleForm.password"
            ></el-input>
            <label for="register_password" class="el-label">Password*</label>
            <span class="text-show" @click="showPass = !showPass">
              <template v-if="!showPass">Show</template>
              <template v-else>Hide</template>
            </span>
          </el-form-item>
          <ul class="reset-form-tips">
            <li :class="{ valid: passwordCriteria.minLength }">
              <template v-if="passwordCriteria.minLength">
                {% render 'icon' with 'v3-yes' %}
              </template>
              6-20 characters
            </li>
            <li :class="{ valid: passwordCriteria.hasLetter }">
              <template v-if="passwordCriteria.hasLetter">
                {% render 'icon' with 'v3-yes' %}
              </template>
              1 uppercase and 1 lowercase letter
            </li>
            <li :class="{ valid: passwordCriteria.hasNumber }">
              <template v-if="passwordCriteria.hasNumber">
                {% render 'icon' with 'v3-yes' %}
              </template>
              1 number
            </li>
          </ul>
        </el-row>
        <el-row>
          <el-form-item class="line-input" prop="confirmPassword">
            <el-input
              autocomplete="new-password"
              id="register_confirm_password"
              v-model="ruleForm.confirmPassword"
              :type="!showPass1? 'password': 'text'"
              v-focus-input="ruleForm.confirmPassword"
            ></el-input>
            <label for="register_confirm_password" class="el-label">Confirm Password*</label>
            <span class="text-show" @click="showPass1 = !showPass1">
              <template v-if="!showPass1">Show</template>
              <template v-else>Hide</template>
            </span>
          </el-form-item>
        </el-row>
        <div class="el-form-btn">
          <el-button id="submitReset" :loading="loading" type="primary" @click="submitForm('ruleForm')">Reset</el-button>
        </div>
      </el-form>
    </div>
  </div>
</section>

<script>
  (() => {
    Vue.directive('focus-input', {
      inserted(el, binding, vnode) {
        const inputEl = el.querySelector('input');
        if (!inputEl) return;
        const $label = $(inputEl).closest('.el-form-item__content').find('label');
        
        const toggleLabelFocus = () => {
          if ($(inputEl).val().length === 0 && !inputEl.matches(':focus')) {
            $label.removeClass('label--focus');
          }
        };

        inputEl.addEventListener('focus', () => {
          $label.addClass('label--focus');
        });

        inputEl.addEventListener('blur', () => {
          setTimeout(toggleLabelFocus, 100);
        });

        if (binding.value) {
          $label.addClass('label--focus');
        } else {
          $label.removeClass('label--focus');
        }
      },
      update(el, binding, vnode) {
        const inputEl = el.querySelector('input');
        if (!inputEl) return;
        const $label = $(inputEl).closest('.el-form-item__content').find('label');
        if (binding.value) {
          $label.addClass('label--focus');
        } else if (!inputEl.matches(':focus')) {
          $label.removeClass('label--focus');
        }
      },
    });
    new Vue({
      el: '#reset-wrapper',
      delimiters: ['${', '}'],
      data() {
        return {
          loading: false,
          passwordCriteria: {
            minLength: false,
            hasLetter: false,
            hasNumber: false,
          },
          ruleForm: {
            password: '',
            confirmPassword: '',
          },
          rules: {
            password: [{ validator: this.checkPass, trigger: 'blur' }],
            confirmPassword: [{ validator: this.checkConfirmPass, trigger: 'blur' }],
          },
          showPass: false,
          showPass1: false,
        };
      },
      created() {
        const regex = /reset\/(\d+)\//;
        const match = window.location.href.match(regex);
        if (match) {
          const id = match[1];
          this.id = id;
        }
      },
      methods: {
        checkPasswordCriteria() {
          const password = this.ruleForm.password;
          this.passwordCriteria.minLength = password.length >= 6 && password.length <= 20;
          this.passwordCriteria.hasLetter = /[A-Z]/.test(password) && /[a-z]/.test(password);
          this.passwordCriteria.hasNumber = /\d/.test(password);
        },
        checkPass(rule, value, callback) {
          this.checkPasswordCriteria();
          if (
            !this.passwordCriteria.minLength ||
            !this.passwordCriteria.hasLetter ||
            !this.passwordCriteria.hasNumber
          ) {
            callback(new Error('Password does not meet all criteria.'));
          } else {
            if (this.ruleForm.confirmPassword) {
              this.$refs.ruleForm.validateField('confirmPassword');
            }
            callback();
          }
        },
        checkConfirmPass(rule, value, callback) {
          if (value === '') {
            callback(new Error('Confirm password is required.'));
          } else if (value !== this.ruleForm.password) {
            callback(new Error('Password inconsistency.'));
          } else {
            callback();
          }
        },
        async submit() {
          this.loading = true;
          const form = {
            customerId: +this.id,
            password: this.ruleForm.password,
          };
          try {
            const res = await fetch(`${window.zkh.api}/reset/password`, {
              method: 'PUT',
              body: JSON.stringify(form),
              headers: {
                'Content-Type': 'application/json',
              },
            });
            const data = await res.json();
            if (data.code == 200) {
              this.$message({
                showClose: true,
                message: 'Password has been changed',
                type: 'success',
              });
              const ip = Cookies.get('ip');
              if(ip) {
                dataLayer.push({
                  'event': 'custom_password_reset',
                  'zip': '{{ customer.default_address.zip  }}',   
                  'first_name':'{{customer.first_name }}', 
                  'last_name': '{{customer.last_name }}',
                  'username': '{{customer.name }}',
                  'email':'{{customer.email }}',
                  'ip': ip
                });
              }
              
              setTimeout(() => {
                window.location.href = '/account/login';
              }, 300);
            } else {
              this.$message({
                showClose: true,
                message: data.msg,
                type: 'warning',
              });
            }
          } catch (error) {
          } finally {
            this.loading = false;
          }
        },
        submitForm(formName) {
          this.$refs[formName].validate((valid) => {
            if (valid) this.submit();
          });
        },
      },
    });
  })();
</script>
{% schema %}
{
  "name": "Customer reset password",
  "class": "shopify-section--main-customers-reset-password"
}
{% endschema %}
