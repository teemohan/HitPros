 {% comment %} <i class="el-icon-close text-18 font-bold text-main cursor-pointer"></i> {% endcomment %}
{% raw %}
  <script type="text/x-template" id="product-item-delevery">
    <div class="w-full pb-2 fb-sm:pb-0">
      <div class="bg-white hidden fb-sm:flex flex-col gap-1.5 mt-10 fb-sm:mt-2">
        <div class="ships">
          <div class="expect text-14 text-12254D">
            <span class="">Enter a ZIP Code.</span>
          </div>
          <el-form class="form reset-input-zip flex items-center justify-start space-x-5 mt-2" ref="ruleForm" :model="ruleForm">
            <el-form-item class="w-8.75r !mb-0 h-9" prop="zipCode">
              <el-input
                v-model="ruleForm.zipCode"
                placeholder="ZIP Code"
                class="[&_input]:h-9 [&_input]:w-8.75r [&_input]:text-darkmain text-center"
                @keydown.enter.native.prevent="handleComputedDeleveryDate"
              >
              </el-input>
            </el-form-item>
            <el-button
              :loading="loading"
              @click.stop="handleComputedDeleveryDate"
              class="border h-9 border-main text-main text-16 w-25 flex items-center justify-center rounded-[2px] hover:bg-white hover:text-main hover:border-main focus:text-white"
              >
              Submit
            </el-button>
          </el-form>
          <div class="text-14 mt-4 text-main" v-if="isEstimateShow">
            <template v-if="deleveryRes.availableInventoryCount === 0">
              <div>Expected to arrive between <span class="font-bold">{{ formatDate(stockDateStart) }}</span> and <span class="font-bold">{{ formatDate(stockDateEnd) }}</span>.</div>
            </template>
            <template v-else-if="deleveryRes.availableInventoryCount >= deleveryRes.demandQuantity">
              <div>Expected to arrive on <span class="font-bold">{{ formatDate(deleveryRes.availableInventoryDeliveryTimeStamp) }}</span>.</div>
            </template>
            <template v-else>
              <div>Partial expected to arrive on <span class="font-bold">{{ formatDate(+deleveryRes.availableInventoryDeliveryTimeStamp) }}</span>.</div>
              <div>The remaining balance is expected to arrive between <span class="font-bold">{{ formatDate(stockDateStart) }}</span> and <span class="font-bold">{{ formatDate(stockDateEnd) }}</span>.</div>
            </template>
          </div>
        </div>
      </div>
      <div class="block w-full fb-sm:hidden mt-3.5 mb-2">
        <el-dropdown class="w-full" trigger="click"  ref="dropdownRef"  placement="bottom-end">
          <span class="el-dropdown-link text-darkmain text-14">
            Enter Zip Code
            <i class="el-icon-arrow-down el-icon--right text-darkmain font-bold"></i>
          </span>
          <el-dropdown-menu slot="dropdown" class="w-15r pb-5 pt-2 px-2.5">
            <div class="w-full h-5 flex items-end justify-end" @click="goCloseDrop">
              <i class="el-icon-close text-18 font-bold text-main cursor-pointer"></i>
            </div>
            <div class="dropdown-form mt-2" @click.stop>
              <el-form class="form flex items-center justify-between space-x-2" ref="mobileRuleForm" :model="ruleForm">
                <el-form-item prop="zipCode" class="h-full w-23 !mb-0 flex items-center justify-between">
                  <el-input
                    v-model="ruleForm.zipCode"
                    class="[&_input]:text-14 [&_input]:border [&_input]:border-D3DEF1 [&_input]:h-8 [&_input]:rounded-sm"
                    placeholder="ZIP Code"
                    @keydown.enter.native.prevent="handleComputedDeleveryDate">
                  </el-input>
                </el-form-item>
                <el-button
                  :loading="loading"
                  @click.stop="handleComputedDeleveryDate"
                  class="h-8 flex-1 text-darkmain text-14 font-bold border border-0A2B6F rounded-sm flex items-center justify-center hover:bg-white hover:text-main hover:border-main focus:text-white"
                >
                  Submit
                </el-button>
              </el-form>
              <div class="text-main text-12" v-if="isEstimateShow">
                <template v-if="deleveryRes.availableInventoryCount === 0">
                  <div>Expected to arrive between <span class="font-bold">{{ formatDate(stockDateStart) }}</span> and <span class="font-bold">{{ formatDate(stockDateEnd) }}</span>.</div>
                </template>
                <template v-else-if="deleveryRes.availableInventoryCount >= deleveryRes.demandQuantity">
                  <div>Expected to arrive on <span class="font-bold">{{ formatDate(deleveryRes.availableInventoryDeliveryTimeStamp) }}</span>.</div>
                </template>
                <template v-else>
                  <div>Partial expected to arrive on <span class="font-bold">{{ formatDate(+deleveryRes.availableInventoryDeliveryTimeStamp) }}</span>.</div>
                  <div>The remaining balance is expected to arrive between <span class="font-bold">{{ formatDate(stockDateStart) }}</span> and <span class="font-bold">{{ formatDate(stockDateEnd) }}</span>.</div>
                </template>
              </div>
            </div>
          </el-dropdown-menu>
        </el-dropdown>
      </div>
    </div>
  </script>
{% endraw %}
<script>

  Vue.component('product-item-delevery', {
    template: '#product-item-delevery',
    props: {
      product: {
        type: Object,
        required: true
      },
      productDemand: {
        type: [String, Number],
        required: true,
        default: 1
      }
    },
    data() {
      return {
        loading: false,
        isEstimateShow: false,
        stockDateStart: 0,
        stockDateEnd: 0,
        deleveryRes: null,
        ruleForm: {
          zipCode: window.northsky.customerZipCode || '',
        },
        isChangedZip: false,
        zipcodeUpdateHandler: null
      };
    },
    mounted() {
      this.zipcodeUpdateHandler = (event) => {
        if(!this.isChangedZip) {
          this.ruleForm.zipCode = event.detail;
          localStorage.setItem('customerZipCode', event.detail);
        } else {
          this.isChangedZip = false;
        }
      };
      document.addEventListener('zipcode-updated', this.zipcodeUpdateHandler);
    },
    methods: {
      goCloseDrop () {
        this.$refs.dropdownRef.hide();
      },
      formatDate(timestamp, timezoneOffset = -5) {
        const date = new Date(+timestamp);
        const localTime = new Date(date.getTime() + timezoneOffset * 60 * 60 * 1000);
        const year = localTime.getFullYear();
        const monthNames = [
          'January',
          'February',
          'March',
          'April',
          'May',
          'June',
          'July',
          'August',
          'September',
          'October',
          'November',
          'December',
        ];
        const month = monthNames[localTime.getMonth()];
        const day = localTime.getDate();

        let suffix = '';
        if (day >= 11 && day <= 13) {
          suffix = 'th';
        } else {
          switch (day % 10) {
            case 1:
              suffix = 'st';
              break;
            case 2:
              suffix = 'nd';
              break;
            case 3:
              suffix = 'rd';
              break;
            default:
              suffix = 'th';
              break;
          }
        }
        return `${month} ${day}${suffix}, ${year}`;
      },
      async handleComputedDeleveryDate() {
        const _this = this;
        const quantity = +this.productDemand || 1;
        const sku = this.product.sku;
        getDeliveryEstimate({
          zipCode: _this.ruleForm.zipCode,
          sku: sku,
          quantity: quantity,
          onLoadingChange: (loading) => {
            _this.loading = loading;
          },
          onError: (error) => {
            console.error('Error fetching delivery data:', error);
            _this.$message({
              showClose: true,
              message: error.message || 'Failed to get delivery estimate',
              type: 'error'
            });
          },
          onSuccess: (result) => {
            _this.deleveryRes = result.deliveryData;
            _this.stockDateStart = result.stockDateStart;
            _this.stockDateEnd = result.stockDateEnd;
            _this.isEstimateShow = true;
            _this.isChangedZip = true;
          }
        }).catch(error => {
          console.error('Delivery estimate failed:', error);
        })
          
      }
    },
    beforeDestroy() {
      document.removeEventListener('zipcode-updated', this.zipcodeUpdateHandler);
    },
  });
</script>
