{% raw %}
  <script type="text/x-template" id="product-item-delevery">
    <div class="buy-bottom-box-wrapper">
      <div class="buy-bottom-box">
        <div class="ships">
          <div class="expect">
            <span>Enter a ZIP Code.</span>
          </div>
          <el-form class="form el-reset-from" ref="ruleForm" :model="ruleForm" :rules="rules">
            <el-form-item prop="zipCode">
              <el-input
                v-model="ruleForm.zipCode"
                placeholder="ZIP Code"
                @keydown.enter.native.prevent="handleComputedDeleveryDate">
              </el-input>
            </el-form-item>
            <el-button
              :loading="loading"
              @click.stop="handleComputedDeleveryDate">
              Submit
            </el-button>
          </el-form>
          <div class="line-item__property date" v-if="isEstimateShow">
            <template v-if="deleveryRes.availableInventoryCount === 0">
              <span>Expected to arrive between {{ formatDate(stockDateStart) }} and {{ formatDate(stockDateEnd) }}.</span>
            </template>
            <template v-else-if="deleveryRes.availableInventoryCount >= deleveryRes.demandQuantity">
              <span>Expected to arrive on {{ formatDate(deleveryRes.availableInventoryDeliveryTimeStamp) }}.</span>
            </template>
            <template v-else>
              <span>Partial expected to arrive on {{ formatDate(+deleveryRes.availableInventoryDeliveryTimeStamp) }}.</span>
              <span>The remaining balance is expected to arrive between {{ formatDate(stockDateStart) }} and {{ formatDate(stockDateEnd) }}.</span>
            </template>
          </div>
        </div>
      </div>
    </div>
  </script>
{% endraw %}
<script>

  Vue.component('product-item-delevery', {
    template: '#product-item-delevery',
    props: {
      product: {
        type: Object,
        required: true
      },
      productDemand: {
        type: [String, Number],
        required: true,
        default: 1
      }
    },
    data() {
      return {
        loading: false,
        isEstimateShow: false,
        stockDateStart: 0,
        stockDateEnd: 0,
        deleveryRes: null,
        ruleForm: {
          zipCode: window.zkh.customerZipCode || '',
        },
        isChangedZip: false,
        rules: {
          zipCode: [{ validator: this.validateZipCode, trigger: 'blur' }],
        },
        zipcodeUpdateHandler: null
      };
    },
    mounted() {
      this.zipcodeUpdateHandler = (event) => {
        if(!this.isChangedZip) {
          this.ruleForm.zipCode = event.detail;
          localStorage.setItem('customerZipCode', event.detail);
        } else {
          this.isChangedZip = false;
        }
      };
      document.addEventListener('zipcode-updated', this.zipcodeUpdateHandler);
    },
    methods: {
      validateZipCode(rule, value, callback) {
        if (!value) {
          return callback(new Error('ZIP Code is required'));
        } else if (String(value).length !== 5) {
          return callback(new Error('Zip code must be 5 digits'));
        } else {
          return callback();
          {% comment %} getZipCode('US', value, function (result) {
            if(result?.valid) {
              return callback();
            } else {
              return callback(new Error('The ZIP Code is invalid.'));
            }
          }); {% endcomment %}
        }
      },
      formatDate(timestamp, timezoneOffset = -5) {
        const date = new Date(+timestamp);
        const localTime = new Date(date.getTime() + timezoneOffset * 60 * 60 * 1000);
        const year = localTime.getFullYear();
        const monthNames = [
          'January',
          'February',
          'March',
          'April',
          'May',
          'June',
          'July',
          'August',
          'September',
          'October',
          'November',
          'December',
        ];
        const month = monthNames[localTime.getMonth()];
        const day = localTime.getDate();

        let suffix = '';
        if (day >= 11 && day <= 13) {
          suffix = 'th';
        } else {
          switch (day % 10) {
            case 1:
              suffix = 'st';
              break;
            case 2:
              suffix = 'nd';
              break;
            case 3:
              suffix = 'rd';
              break;
            default:
              suffix = 'th';
              break;
          }
        }
        return `${month} ${day}${suffix}, ${year}`;
      },
      async handleComputedDeleveryDate() {
        const _this = this;
        const quantity = +this.productDemand || 1;
        const sku = this.product.sku;
        getDeliveryEstimate({
          zipCode: _this.ruleForm.zipCode,
          sku: sku,
          quantity: quantity,
          onLoadingChange: (loading) => {
            _this.loading = loading;
          },
          onError: (error) => {
            console.error('Error fetching delivery data:', error);
            _this.$message({
              showClose: true,
              message: error.message || 'Failed to get delivery estimate',
              type: 'error'
            });
          },
          onSuccess: (result) => {
            _this.deleveryRes = result.deliveryData;
            _this.stockDateStart = result.stockDateStart;
            _this.stockDateEnd = result.stockDateEnd;
            _this.isEstimateShow = true;
            _this.isChangedZip = true;
          }
        }).catch(error => {
          console.error('Delivery estimate failed:', error);
        })
          
      }
    },
    beforeDestroy() {
      document.removeEventListener('zipcode-updated', this.zipcodeUpdateHandler);
    },
  });
</script>
