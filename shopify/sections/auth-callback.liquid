<section>
  <!-- OAuth callback processing page -->
  <div class="min-h-screen flex items-center justify-center bg-gray-50">
    <div class="max-w-md w-full space-y-8 p-8">
      <div class="text-center">
        <!-- Loading animation -->
        <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-main mb-4"></div>
        <h2 class="text-xl font-semibold text-gray-900 mb-2">Processing login...</h2>
        <p class="text-gray-600">Please wait while we verify your identity</p>
      </div>
      <!-- Error message display -->
      <div id="error-message" class="hidden bg-red-50 border border-red-200 rounded-md p-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">Login Failed</h3>
            <div class="mt-2 text-sm text-red-700">
              <p id="error-text"></p>
            </div>
            <div class="mt-4">
              <button onclick="redirectToLogin()" class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded text-sm">
                Return to Login Page
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
{% schema %}
{
  "settings": [
  ],
  "presets": [
    {
      "name": "auth-callback"
    }
  ]
}
{% endschema %}

<script>
  // OAuth callback processing logic
  (function() {
    if('{{ customer.id }}') {
      window.location.replace('/account?slug=account-info');
      return false;
    }
    function getUrlParams() {
      const urlParams = new URLSearchParams(window.location.search);
      return {
        code: urlParams.get('code'),
        state: urlParams.get('state'),
        error: urlParams.get('error'),
        error_description: urlParams.get('error_description')
      };
      
    }
    // Display error message
    function showError(message) {
      const errorDiv = document.getElementById('error-message');
      const errorText = document.getElementById('error-text');
      errorText.textContent = message;
      errorDiv.classList.remove('hidden');
    }
    // Redirect to login page
    function redirectToLogin() {
      window.location.href = '/account/login';
    }
    // Redirect to specified page
    function redirectTo(url) {
      window.location.href = url || '/account';
    }
    
    // Call backend login API
    async function handleThirdPartyLogin(platform, authorizationCode, returnTo) {
      try {
        const result = await kkAjax.post('/third/login',{
            platform: platform,
            authorizationCode: authorizationCode,
            returnTo: returnTo
        });
        if (result.code == 200 && result.data && result.data.login ) {
            const cartRes = await fetch(`${window.northsky.api}/shopping/cart?email=${result.data.userInfo.email}`);
            const cartData = await cartRes.json();
            if(cartData && cartData.data && cartData.data.length > 0) {
              Cookies.set('cart', cartData.data[0].cartValue, { expires: 36500 }); 
            }
            dataLayer.push({
              'event': 'custom_sign_in_completed',
              'account_type': result.data.userInfo.companyName ? 'Business': 'Personal',
              'company': result.data.userInfo.companyName ? result.data.userInfo.companyName : null
            });
            window.location.replace(result.data.redirectUrl)
        } else {
          const errorMessage = result.message || 'Login failed, please try again';
          showError(errorMessage);
        }
      } catch (error) {
        console.error('Third party login error:', error);
        showError(error || 'Network error, please check your connection and try again');
      }
    }
    
    // Main processing logic
    function processCallback() {
      const params = getUrlParams();
      if (params.error) {
        const errorMsg = params.error_description || `Authorization failed: ${params.error}`;
        showError(errorMsg);
        window.location.replace('/')
        return;
      }
      
      // Check required parameters
      if (!params.code || !params.state) {
        showError('Missing required authorization parameters');
        window.location.replace('/')
        return;
      }
      
      try {
        // Parse state parameter
        const stateData = JSON.parse(params.state);
        const platform = stateData.source;
        const returnTo = stateData.returnTo;
        if (!platform) {
          showError('Invalid authorization source');
          window.location.replace('/')
          return;
        }
        window.history.replaceState(null, "", "/pages/auth-callback");
        handleThirdPartyLogin(platform, params.code, returnTo);
      } catch (error) {
        console.error('State parsing error:', error);
        showError('Authorization state parsing failed');
      }
    }
    // Execute when page loads
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', processCallback);
    } else {
      processCallback();
    }
    // Expose redirect function to global scope for button click
    window.redirectToLogin = redirectToLogin;
  })();
</script>