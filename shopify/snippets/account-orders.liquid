{{ 'account-order.css' | asset_url | stylesheet_tag }}
<div class="visually-hidden" id="orders-data">
  {%- paginate customer.orders by 20 -%}
    {% for order in customer.orders %}
      <div data-order='{
        "id": "{{ order.id }}",
        "name": "{{ order.name }}",
        "cancelled": {{ order.cancelled | json }},
        "customer_name": "{{ order.customer.name | escape }}",
        "customer_email": "{{ order.customer.email | escape }}",
        "item_count": "{{ order.item_count }}",
        "total_price": "{{ order.total_price | money | escape }}",
        "total_price_original": "{{ order.total_price }}",
        "financial_status": "{{ order.financial_status | escape }}",
        "fulfillment_status": "{{ order.fulfillment_status | escape }}",
        "created_at": "{{ order.created_at | date: '%b. %d, %Y at %I:%M:%S %p' }}",
        "created_at_date": "{{ order.created_at | date: "%Y/%m/%d %H:%M:%S" }}",
        "loading": false,
        "invoice_loading": false,
        {% assign image_line_items = order.line_items | where: "image" %}
        "line_items_img": [
          {% for line_item in image_line_items %}
            { "img": "{{ line_item.image | image_url | escape }}" }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ],
        "line_items": [
          {% for line_item in order.line_items %}
            { 
              "id": "{{ line_item.variant_id }}",
              {% if line_item.product.first_available_variant.available %}
              "quantity": "{{ line_item.quantity }}" 
              {% else %}
              "quantity": 0
              {% endif %}
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ]
      }'></div>
    {% endfor %}
  {%- endpaginate -%}
</div>

{% raw %}
  <template id="accountOrders">
  <div class="account-main-container account-order el-reset-from">
    <el-dialog
      width="484px"
      title="Cancel Order"
      :visible.sync="dialogVisibleCancel"
      :show-close="true"
    >
      <div>Are you sure you want to cancel this order?</div>
      <div slot="footer" style="margin-top: 24px;">
        <div class="el-form-btn dialog-form-btn">
          <el-button
            :loading="cancelOrderLoading"
            @click="handleCancelOrder"
            class="el-dialog--btn-cancel"
          >
            Yes
          </el-button>
          <div @click="dialogVisibleCancel = false" class="el-dialog--btn-cancel">No, Go Back</div>
        </div>
      </div>
    </el-dialog>
    <header class="account-item-header-wrapper">
      <div class="account-item-header">
        <h1>My Orders</h1>
      </div>
      <span class="account-item-num">{{ total }} {{ total == 0 || total == 1 ? 'order' : 'orders' }}</span>
    </header>
    <template v-if="ordersData.length > 0">
      <div class="account-order-main">
        <div v-for="(order ,idx) in ordersData" :key="idx" class="account-order-line">
          <header>
            <div>
              <span>Order Number:</span>
              <span class="order-number">
                <a @click="navToDetail(`pages/order-details?id=${ order.id }`)" :href="`pages/order-details?id=${ order.id }`">{{ order.name }}</a>
                <span style="display: flex;" @click="handleCopy(order.name)">
                  <svg
                    t="1729757775593"
                    class="icon"
                    viewBox="0 0 1024 1024"
                    version="1.1"
                    xmlns="http://www.w3.org/2000/svg"
                    p-id="1857"
                    width="12"
                    height="12"
                  >
                    <path d="M924 862a40 40 0 0 1 0-80 20 20 0 0 0 20-20V100a20 20 0 0 0-20-20H262a20 20 0 0 0-20 20 40 40 0 0 1-80 0A100 100 0 0 1 262 0h662a100 100 0 0 1 100 100v662a100 100 0 0 1-100 100z" fill="#808080" p-id="1858"></path><path d="M762 1024H100A100 100 0 0 1 0 924V262a100 100 0 0 1 100-100h662a100 100 0 0 1 100 100v662a100 100 0 0 1-100 100zM100 242a20 20 0 0 0-20 20v662a20 20 0 0 0 20 20h662a20 20 0 0 0 20-20V262a20 20 0 0 0-20-20z" fill="#808080" p-id="1859"></path><path d="M431 807a40 40 0 0 1-40-40V419a40 40 0 0 1 80 0v348a40 40 0 0 1-40 40z" fill="#808080" p-id="1860"></path><path d="M605 633H257a40 40 0 0 1 0-80h348a40 40 0 0 1 0 80z" fill="#808080" p-id="1861"></path>
                  </svg>
                </span>
              </span>
            </div>
            <div>
              <span>Order Placed: </span>
              <span>{{ order.created_at }}</span>
            </div>
          </header>
          <main @click="navToDetail(`pages/order-details?id=${ order.id }`)">
            <div class="order-product-info">
              <template v-if="order.line_items_img?.length">
                <template v-for="(item, idx) in order.line_items_img.slice(0, 2)">
                  <img
                    :key="idx"
                    :src="item.img"
                    width="auto"
                    height="auto"
                    alt="Product Image"
                  >
                </template>
                <template v-if="order.line_items_img.length > 2">
                  <span>...</span>
                </template>
                <template v-else>
                  <span class="opacity-none">...</span>
                </template>
              </template>
            </div>
            <div class="line-item-middle">
              <div class="account-order-line-item">
                <span>Qty</span>
                <div>{{ order.item_count }}</div>
              </div>
              <div class="account-order-line-item">
                <span>Total</span>
                <div>{{ order.total_price }}</div>
              </div>
              <div class="account-order-line-item">
                <span>Order Status</span>
                <div class="order-status">
                  <template v-if="order.cancelled">
                    <div>Cancelled;</div>
                    <div>Refunded</div>
                  </template>
                  <template v-else>
                    <div>{{ order.fulfillmentStatus }};</div>
                    <div>{{ order.financial_status }}</div>
                  </template>
                </div>
              </div>
            </div>
          </main>
          <footer>
            <div class="account-order-actions">
              <template v-if="!order.cancelled">
                <el-button
                  @click="handleOpenInvoice(order)"
                  :loading="order.invoice_loading"
                  type="text"
                  >Invoice/Receipt
                </el-button>
                <span class="dot"></span>
                <a :href="`/pages/after-sales-request?id=${ order.id }`">Refund Only</a>
                 <span v-if="order.fulfillment_status != 'unfulfilled'" class="dot"></span>
                <a v-if="order.fulfillment_status != 'unfulfilled'" :href="`/pages/after-sales-return-request?id=${ order.id }`">Return & Refund</a>
              </template>
            </div>
            <el-button
              :loading="getLoading(order.id)"
              type="primary"
              class="el-btn"
              @click.top="handleBuyAgain(order.id)"
              >Buy Again</el-button
            >
          </footer>
        </div>
      </div>
      <el-pagination
        background
        layout="prev, pager, next"
        :current-page.sync="queryParam.page"
        :page-size="queryParam.pageSize"
        :total="total"
        @current-change="handlePageChange"
      >
      </el-pagination>
    </template>
    <template v-else>
      <div class="empty-notify">
        <p>No records found.</p>
        <a href="/">Shop Now</a>
      </div>
    </template>
  </div>
</template>
{% endraw %}

<script>
  (() => {
    window.accountOrders = {
      template: '#accountOrders',
      data() {
        return {
          pixiUrl: window.zkh.pixi_url,
          pixiNetUrl: window.zkh.pixi_net_url,
          loading: false,
          dialogVisibleCancel: false,
          total: +'{{ customer.orders_count }}',
          ordersData: [],
          cancelOrderLoading: false,
          order: {},
          orderRuleForm: {
            orderId: 0,
            reason: "OTHER",
            userEmail: '{{ customer.email }}'
          },
          queryParam: {
            page: 1,
            pageSize: 20,
          }
        };
      },
      created() {
        this.getData();
      },
      mounted() {
        document.addEventListener('keydown', (event) => {
          if (event.key === 'Enter' && this.dialogVisibleCancel) {
            event.preventDefault(); // 阻止默认行为
            event.stopPropagation(); // 阻止事件冒泡
            this.dialogVisibleCancel = false;
          }
        });
      },
      methods: {
        handleOpenInvoice(order) {
          order.invoice_loading = true;
          fetch(`${window.zkh.api}/order/${order.id}`)
            .then(response => response.json())
            .then(res =>{
              if(res.code == 200) {
                if(res.data.order.payment_terms?.payment_terms_type == 'net') {
                  window.open(`${ this.pixiNetUrl }/${ order.id }`, '_blank');
                } else {
                  window.open(`${ this.pixiUrl }/${ order.id }`, '_blank');
                }
              }
              order.invoice_loading = false;
            })
        },
        handleBeforeCancelOrder(order) {
          this.order = order;
          this.orderRuleForm.orderId = +order.id;
          this.dialogVisibleCancel = true;
        },
        async handleCancelOrder() {
          this.cancelOrderLoading = true;
          try {
            const response = await fetch(`${window.zkh.api}/order/cancel`, {
              method: 'PUT',
              body: JSON.stringify(this.orderRuleForm),
              headers: {
                'Content-Type': 'application/json',
              },
            });
            const res = await response.json();
            if (res.code === 200) {
              if(res.msg == 'order is synced to sap, can not cancel.') {
                this.$message({
                  showClose: true,
                  message: 'Can not cancel.',
                  type: 'warning',
                });
              } else {
                this.$message({
                  showClose: true,
                  message: 'Cancelled.',
                  type: 'success',
                });
                this.order.canCancel = false;
                this.order.cancelled = true;
              }
            }
          } catch (error) {
            console.error(error); 
          } finally {
            this.dialogVisibleCancel = this.cancelOrderLoading = false;
          }
        },
        getData() {
          this.ordersData = $('[data-order]').map(function() {
            return $(this).data('order');
          }).get().map(order => {
            const createdAtTimestamp = new Date(order.created_at_date).getTime();

            const getTimestampInTimezone = (timezoneOffset) => {
              const now = new Date();
              const utcTimestamp = now.getTime() + now.getTimezoneOffset() * 60 * 1000; // 当前 UTC 时间戳
              return utcTimestamp + timezoneOffset * 60 * 60 * 1000; // 指定时区的时间戳
            };
            
            const gmtMinus5Timestamp = getTimestampInTimezone(-5); // GMT-5 时区的时间戳
            const currentTimestamp = Date.now(); // 当前时间戳
          
            // 检查是否小于 15 分钟
            const canCancel = (gmtMinus5Timestamp - createdAtTimestamp) < 15 * 60 * 1000;
         
            if(!order.fulfillment_status) {
              order.fulfillmentStatus = 'Not shipped'
            } else if(order.fulfillment_status == 'fulfilled') {
              order.fulfillmentStatus = 'Shipped'
            } else if(order.fulfillment_status == 'unfulfilled') {
              order.fulfillmentStatus = 'Not shipped'
            } else if(order.fulfillment_status == 'partial') {
              order.fulfillmentStatus = 'Partially shipped'
            }
            function capitalizeWords(str) {
              return str
                .split('_') // 按下划线分割
                .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // 首字母大写
                .join(''); // 拼接成一个字符串
            }

            if(order.financial_status) {
              order.financial_status = capitalizeWords(order.financial_status.split('_').join(' '));
            }
            return {
              ...order,
              canCancel
            };
          });
        },
        navToDetail(href) {
          window.location.href = href;
        },
        async handlePageChange(newPage) {
          this.queryParam.page = newPage;
          const url = new URL(window.location);
          url.searchParams.set('section_id', '{{ section.id }}');
          url.searchParams.set('page', this.queryParam.page);
          const response = await fetch(url.toString());
          const responseAsText = await response.text();
          const orderDatas = $(responseAsText).find('#orders-data');
          if (orderDatas.children().length > 0) {
            $('#orders-data').html(orderDatas.html());
            this.getData();
          }          
        },
        getLoading(orderId) {
          const order = this.ordersData.find((o) => o.id === orderId);
          return order ? order.loading : false;
        },
        handleCopy(name) {
          navigator.clipboard.writeText(name).then(() => {
            this.$message({
              showClose: true,
              message: 'Copied',
              type: 'success',
            });
          });
        },
        async setLineAttr(cartItems) {
          const response = await fetch('/cart.js');
          const res = await response.json();
          if(res.items.length == 0) return;
          cartItems.map(cartItem => {
            const line_item = res.items.find(item => item.id == cartItem.id);
            if(line_item) cartItem.properties = line_item.properties;
          })
        },
        async handleBuyAgain(id) {
          const order = this.ordersData.find((o) => o.id === id);
          order.loading = true;
          const param = {
            items: this.ordersData.find((item) => item.id == id).line_items,
          };
          this.loading = true;
          await this.setLineAttr(param.items); // 清空date属性
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(param),
          });
          const responseJson = await response.json();
          let errorMsg;
          if (response.ok) {
            document.documentElement.dispatchEvent(
              new CustomEvent('variant:added', {
                bubbles: true,
                detail: {
                  variant: responseJson.hasOwnProperty('items') ? responseJson['items'][0] : responseJson,
                },
              })
            );
            fetch(`${window.themeVariables.routes.cartUrl}.js`).then(async (response2) => {
              const cartContent = await response2.json();
              document.documentElement.dispatchEvent(
                new CustomEvent('cart:updated', {
                  bubbles: true,
                  detail: {
                    cart: cartContent,
                  },
                })
              );
              cartContent['sections'] = responseJson['sections'];
              document.documentElement.dispatchEvent(
                new CustomEvent('cart:refresh', {
                  bubbles: true,
                  detail: {
                    cart: cartContent,
                    openMiniCart: window.themeVariables.settings.cartType === 'drawer',
                  },
                })
              );
            });
          } else {
            if (responseJson['description'].endsWith('are in your cart.')) {
              errorMsg = 'Your cart already contains all available stock Unable to add more';
            } else if (responseJson['description'].endsWith('to the cart.')) {
              errorMsg =
                'The available stock has been added to your cart，the excess quantity beyond available stock cannot be added';
            }
          }
          document.documentElement.dispatchEvent(
            new CustomEvent('cart-notification:show', {
              bubbles: true,
              cancelable: true,
              detail: {
                status: response.ok ? 'success' : 'error',
                error: errorMsg || responseJson['description'] || '',
              },
            })
          );
          order.loading = false;
        },
      },
    };
  })();
</script>
